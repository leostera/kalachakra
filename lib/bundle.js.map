{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src/index.js",
    "src/utils.js"
  ],
  "names": [],
  "mappings": "AAAA;;;ACEA;;AAUA;AAKA,IAAM,OAAO,SAAP,AAAO,KAAA,AAAC,IAAD;;QAAS,AAChB,AACJ;SAAK,eAAM,AACT;UAAI,AACF;eAAA,AAAO,AACR;AAFD,QAEE,OAAA,AAAO,GAAG,AACV;cAAA,AAAM,AACP;AACF;AARmB,AASpB;WAAO,iBAAY,AACjB;cAAA,AAAQ,UAAR,AAAkB,KAAK,KAAvB,AAA4B,AAC7B;AAXU,AAAS;AAAA,AACpB;AADF;;AAcA;;;AAKA,IAAM,WAAW,SAAX,AAAW,WAAgB,AAC/B;MAAM,QAAN,AAAc,AAEd;;MAAM,MAAM,SAAN,AAAM,IAAA,AAAC,GAAD,AAAI,GAAM,AACpB;UAAA,AAAM,KAAK,EAAC,MAAD,AAAO,GAAG,MAArB,AAAW,AAAgB,AAC5B;AAFD,AAIA;;MAAM,MAAM,SAAN,AAAM,IAAA,AAAC,GAAD,AAAI,GAAJ;WAAU,CAAC,MAAX,AAAU,AAAC,AAAM;AAA7B,AAEA;;;SAAO,AACA,AACL;SAFF,AAAO,AAEA,AAER;AAJQ,AACL;AAVJ;;AAeA;;AAKA,IAAM,YAAY,SAAZ,AAAY,YAAiB,AACjC;MAAM,aAAN,AAAmB,AACnB;MAAI,WAAW,CAAf,AAAgB,AAEhB;;MAAM,WAAW,SAAX,AAAW,SAAA,AAAC,GAAD,AAAI,GAAM,AACzB;eAAA,AAAW,IAAX,AAAe,GAAf,AAAkB,AACnB;AAFD,AAIA;;MAAM,MAAM,SAAN,AAAM,MAAM,AAChB;AACA;AACA;eAAA,AACG,IADH,AACO,UAAU,WADjB,SAAA,AAEG,IAAK,aAAA;aAAK,EAAL,AAAK,AAAE;AAFf,AAGD;AAND,AAQA;;SAAO,EAAE,UAAF,UAAY,KAAnB,AAAO,AACR;AAjBD;;;;;;;;;;;ACtDA;AACA,IAAM,OAAO,SAAP,IAAO;AAAA,SAAM,OAAO,WAAP,CAAmB,GAAnB,KAAyB,CAA/B;AAAA,CAAb;;AAEA,IAAM,YAAY,SAAZ,SAAY;AAAA,SAAO,IAAI,IAAJ,EAAD,CAAa,YAAb,GAA4B,KAA5B,CAAkC,GAAlC,EAAuC,CAAvC,CAAN;AAAA,CAAlB;AACA,IAAM,MAAO,SAAP,GAAO;AAAA,SAAS,WAAT,SAAwB,MAAxB;AAAA,CAAb;;AAEA,IAAM,MAAM,SAAN,GAAM,GAA0B;AAAA;;AAAA,oCAAtB,IAAsB;AAAtB,QAAsB;AAAA;;AACpC;AACA;AACC,oBAAkB,YAAnB,IACK,qBAAQ,GAAR,kBAAY,KAAZ,4BAAsB,IAAtB,GADL;AAED,CALD;;AAOA,IAAI,EAAJ,GAAS,UAAC,SAAD;AAAA,SAAiC,IAAI,IAAJ,CAAS,EAAT,EAAa,SAAb,CAAjC;AAAA,CAAT;;AAEA,IAAM,QAAkB,IAAI,EAAJ,CAAO,QAAP,CAAxB;AACA,IAAM,OAAkB,IAAI,EAAJ,CAAO,OAAP,CAAxB;;AAEA,IAAM,OAAO,SAAP,IAAO,GAAoC;AAAA,qCAAhC,IAAgC;AAAhC,QAAgC;AAAA;;AAC/C,MAAI,OAAO,KAAK,GAAL,CAAS,OAAO,GAAhB,CAAX;AACA,SAAO,KAAK,MAAL,KAAgB,CAAhB,GAAoB,KAAK,CAAL,CAApB,GAA8B,IAArC;AACD,CAHD;AAIA,OAAO,IAAP,GAAc,IAAd;;QAGE,I,GAAA,I;QACA,K,GAAA,K;QACA,I,GAAA,I;QACA,G,GAAA,G;QACA,I,GAAA,I",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "//@flow\n\nimport {\n  tick as now,\n  log,\n  atom,\n} from 'scheduler/utils'\n\ntype Time = number\n\ntype Predicate = Function\n\n// Wrapper around a function\ntype Task = {\n  run(): void;\n  defer(): Promise;\n}\nconst task = (fn) => ({\n  fn: fn,\n  run: () => {\n    try {\n      return fn()\n    } catch (e) {\n      throw e;\n    }\n  },\n  defer: function () {\n    Promise.resolve().then(this.run)\n  }\n})\n\n// Time-Ordered Priority Queue\ntype Timeline = {\n  add(time: Time, task: Task): void;\n  get(from: Time, to: Time): Task[];\n}\nconst timeline = (): Timeline => {\n  const tasks = []\n\n  const add = (t, x) => {\n    tasks.push({time: t, task: x})\n  }\n\n  const get = (a, b) => [tasks.pop()]\n\n  return {\n    add: add,\n    get: get\n  }\n}\n\n// Self-referencing Timeline consumer\ntype Scheduler = {\n  schedule(when: Time, task: Task): Task;\n  run(): void;\n}\nconst scheduler = (): Scheduler => {\n  const __timeline = timeline()\n  let last_run = -1\n\n  const schedule = (w, t) => {\n    __timeline.add(w, t)\n  }\n\n  const run = () => {\n    // Get all the tasks in the timeline between\n    // the last run and right now\n    __timeline\n      .get(last_run, now())\n      .map( x => x.defer() )\n  }\n\n  return { schedule, run }\n}\n",
    "//@flow\n\n// https://www.w3.org/TR/hr-time/#monotonic-clock\nconst tick = () => window.performance.now()|0\n\nconst _now_time = () => (new Date()).toTimeString().split(' ')[0]\nconst now  = () => `${_now_time()}:${tick()}`\n\nconst log = (...args: any[]): void => {\n  // @todo: use ${NODE_ENV} here instead\n  // let envsubst do the job\n  (\"${NODE_ENV}\" !== \"production\")\n    && console.log(now(), ...args)\n}\n\nlog.ns = (namespace: string): Function => log.bind({}, namespace)\n\nconst error: Function = log.ns(\"ERROR:\")\nconst info:  Function = log.ns(\"INFO:\")\n\nconst atom = (...args: Array<string>): Symbol => {\n  let keys = args.map(Symbol.for)\n  return keys.length === 1 ? keys[0] : keys\n}\nwindow.atom = atom\n\nexport {\n  atom,\n  error,\n  info,\n  log,\n  tick\n}\n"
  ]
}